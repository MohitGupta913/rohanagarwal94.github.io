{"meta":{"title":"rohanagarwal94","subtitle":"My Tech Hacks","description":null,"author":"Rohan Agarwal","url":"https://rohanagarwal94.com"},"pages":[],"posts":[{"title":"The top 10 bargains of Fantasy Premier League 2016/17","slug":"bargainsoffpl","date":"2016-08-21T19:32:27.000Z","updated":"2016-08-26T18:05:32.421Z","comments":true,"path":"22/08/2016/bargainsoffpl/","link":"","permalink":"https://rohanagarwal94.com/22/08/2016/bargainsoffpl/","excerpt":"The Barclays Premier League 2016/17 season rewinds us to the time of the Battle of PLataea when mankind witnessed one of the deadliest wars ever. With the awestrucking broadcasting deals, world’s top managers, most expensive player and Zlatan ;) at its disposal, it is more fiercer than ever before. And one not playing the official Fantasy Premier League is missing out on what could be the most happening seasons the fpl managers ever played.","keywords":null,"text":"The Barclays Premier League 2016/17 season rewinds us to the time of the Battle of PLataea when mankind witnessed one of the deadliest wars ever. With the awestrucking broadcasting deals, world’s top managers, most expensive player and Zlatan ;) at its disposal, it is more fiercer than ever before. And one not playing the official Fantasy Premier League is missing out on what could be the most happening seasons the fpl managers ever played. There is certainly no limit to the quality that the premier league possesses this calender year proven from the fact that world class players like Negredo and Llorente are playing for bottom half teams! But as far as the bargains of the fpl is concerned, I was able to narrow down my search to a lucky number 10 so the fpl managers are able to have chance at winning the grand prize. 10. Jordan Ibe - £5.5 mill (Bournemouth) The marquee winger signed from Liverpool could prove to be one of the wild cards of the season depending upon where exactly Bournemouth finishes off. With the player expected to start every single match for the club, I think its certainly stretegic and a calculated risk to take him as your 5th midfielder.9. Wayne Routledge - £5.0 mill (Swansea) The 32 year old winger would undoubtedly be one of the key footballers for Swansea City this season. If they have to leave behind the nightmares of previous seasons , he could truely be their saviour. With a value of £5.0, I think its going to be a gamble worthy of payoff with him certainly involved in half of the goals Swansea scores this season.8. Ahmed Musa - £7.5 mill (Leicester) The center forward arrived from CSKA Moscow in hopes of defending the Premier League title with Leicester City, however with the riches that Premier League possesses today its highly unlikely that the odds turn in his favour. Keeping club goals aside I think, he would surely be one of the lethal strikers of the premier league this season proven by his outstanding solo goal against Barcelona playing XI.7. Anthony Martial - £9.5 mill (ManUtd) Now, many of the readers would be critical of the fact that I put Martial in the list of “BARGAINS” this season. Calm down my August house, let me explain. Manchester United broke the world’s record tranfer fee for the mistake that they had committed whether directly or indirectly ( Sir you are saved for the meantime :)). They would certainly not have done the deal unless for someone under whom every player dreams of playing. ( Sir you are saved again :)). Jose it is, ladies and gentlemen. And with Zlatan , Rooney and Mata/Mkhitaryan part of the deadly attack , it is pure agony for opposing defenders and with Martial listed as midfielder instead of a forward, it is going to be one hell of a bargain.6. Christian Benteke - £7.4 mill (Crystal Palace) With Liverpool taking just over £500k hit over Benteke’s base price despite being a benchwarmer the whole season, is itself indicative of the fact that how influencial could a player of Christian’s quality could prove to be for any club in the league. He is surely gonna be one of the highlight signings of this season.5. Alvaro Negredo - £6.6 mill (Middlesbrough) Felt really miserable when I saw this man eligible for this list, when at one point in his career he was touted to form a formidable partnership with Aguero to lead City’s frontline down the forthcoming years. Having said that, he still possesses the killer instinct of a striker which made him a City favourite and with a goal and 2 assists already in his kitty, he could prove to be Middlesbrough’s Vardy of the season.4. Andre Gray - £6.5 mill (Burnley) Honestly speaking, I was surprised when I saw FPL only gave Gray a mere £6.5 price tag. I mean for the championship top scorer, championship player of the season and one of the top scorers in the pre-season(9), you do expect something more. And for the cherry on the cake, he takes all the penalties too! I think he is gonna go a long way in this season no matter where Burnley finishes in the table.3. John Stones - £5.0 mill (Man City) Well, its hard to get a good defender playing for a good club under £5.0 mill. But its definitely a treasure when you get one of the best defenders of the premier league who is going to be playing for the whole 90 minutes every goddamn time for one of the clubs challenging for the title all in all for pennies… Ah!!! I think it would be foolish for anyone to not take him in his team unless he is a die-hard United fan and loves his club more than the chance of winning the FPL goodies.2. Erik Lamela - £7.1 mill (Spurs) This could well be this lad’s season. Arrived to White Hart Lane for a hefty sum in his younger years, he has so far been unable to produce the magic which brought comparisons with a young Cristiano Ronaldo. However with all that far behind and having spent a good adaptive season in EPL, he is finally ready to take the center stage for Spurs this season. He would surely be one of the regulars in the team even if Janssen is favoured over so far out-of-favour Kane. For a £7.1, he is a strong 3rd midfielder of the team.1. Nathan Redmond - £6.1 mill (Southampton) Well, it was certainly a challenging task to narrow down the list to a single bargain of the season. But with him, it was a task much simpler than I had hoped for. The ex Norwich City man was someone who I didn’t even in my wildest of the dreams think would be part of the list. But a regular playing striker for a top half table finishers like Southampton rated a mere £6.1 mill that too a midfielder is what I believe the biggest bargain one could hope for. And until and unless, the board decides to bring in another striker before the end of the season, his partnership with Shane Long could go a long way in the history of Premier League’s most competitive season.","raw":null,"content":null,"categories":[],"tags":[{"name":"fantasy premier league","slug":"fantasy-premier-league","permalink":"https://rohanagarwal94.com/tags/fantasy-premier-league/"},{"name":"football","slug":"football","permalink":"https://rohanagarwal94.com/tags/football/"}]},{"title":"How to catch rare Pokemons in Pokemon Go","slug":"pokemon","date":"2016-08-08T06:16:27.000Z","updated":"2016-08-08T20:06:36.916Z","comments":true,"path":"08/08/2016/pokemon/","link":"","permalink":"https://rohanagarwal94.com/08/08/2016/pokemon/","excerpt":"The world has already gotten nuts about this Augmented Reality game, but you have to have something extra to emerge on top of the game. And that my friends, is by catching some rare Pokemons.","keywords":null,"text":"The world has already gotten nuts about this Augmented Reality game, but you have to have something extra to emerge on top of the game. And that my friends, is by catching some rare Pokemons. Most of the rare Pokemons are nocturnal i.e. they appear in the game at night. And surely it is not possible for you to go out and hunt in the spooky night.I appear to have found a perfect solution to this problem. Now this hack might be somewhat relative to the device you are using. I am personally using Xiaomi Mi3 and it perfectly worked on my Pokemon Go v.0.29.The following steps are needed to implement the hack. Step 1Open the Settings application on your respective devices.Step 2Change custom time in the settings instead of automatically setting time.Step 3Set the custom time to a time like 3:00am. Step 4Open the Pokemon GO app. Step 5ABRA-KADABRA!!!","raw":null,"content":null,"categories":[],"tags":[{"name":"hack","slug":"hack","permalink":"https://rohanagarwal94.com/tags/hack/"},{"name":"nocturnal","slug":"nocturnal","permalink":"https://rohanagarwal94.com/tags/nocturnal/"},{"name":"pokemon","slug":"pokemon","permalink":"https://rohanagarwal94.com/tags/pokemon/"},{"name":"rare","slug":"rare","permalink":"https://rohanagarwal94.com/tags/rare/"}]},{"title":"How to implement marker clustering using Google Maps API in a fragment","slug":"marker-clustoring","date":"2016-06-18T11:16:36.000Z","updated":"2016-08-08T17:50:55.446Z","comments":true,"path":"18/06/2016/marker-clustoring/","link":"","permalink":"https://rohanagarwal94.com/18/06/2016/marker-clustoring/","excerpt":"Google has provided an excellent documentation on marker clustering (Developers site) , but it still requires hours of hacking before an amateur like me implements it. For those who don’t know its use, clustering is used to represent large number of markers in an effective way.","keywords":null,"text":"Google has provided an excellent documentation on marker clustering (Developers site) , but it still requires hours of hacking before an amateur like me implements it. For those who don’t know its use, clustering is used to represent large number of markers in an effective way. This code gist is again part of my college app(DtuGuide). The Google Maps Android API utility library supports Android API level 9 and above. The animated re-clustering features are only available for Android API level 14 and above. When setting your project build target, make sure you use the latest Android API level. The following code implements clickable markers showing information regarding each marker and also the respective directions to reach a particular marker from the current location by implicitly calling Google Maps Application. I have implemented the concept in a fragment rather than an activity. The markers shown in the map above have been locally saved in the project itself in the form of a JSON file.The following steps implement it- Step 1Add the following dependencies to your app’s Gradle build file. Do update the libraries if a newer version is available.build.gradle12345dependencies &#123; compile 'com.google.maps.android:android-maps-utils:0.4+' compile 'com.google.android.gms:play-services-location:8.1.0' compile 'com.google.android.gms:play-services-maps:8.1.0'&#125; Step 2Locally save the JSON file in your Assets folder which contains the information about the markers . In my case, apart from the compulsory latitude and longitude, I have stored title, subtitle, floor and type. I have displayed title and subtitle in my information dialog on clicking the marker. Each object of the array represents information about the marker. Below is my attached JSON file.map.json1234567891011121314151617181920212223242526272829303132333435363738394041&#123;\"map\":[ &#123;\"title\": \"OAT\",\"subtitle\": \"\",\"floor\": \"Ground\",\"type\": \"\",\"latitude\": \"28.75007207311156\",\"longitude\": \"77.11772996932268\"&#125;,&#123;\"title\": \"SBGF1\",\"subtitle\": \"Chemistry Lab\",\"floor\": \"Ground\",\"type\": \"Lab\",\"latitude\": \"28.75136748222652\",\"longitude\": \"77.1180622279644\"&#125;,&#123;\"title\": \"SBGF2\",\"subtitle\": \"Processing Lab\",\"floor\": \"Ground\",\"type\": \"\",\"latitude\": \"28.75128988158836\",\"longitude\": \"77.11803004145622\"&#125;,&#123;\"title\": \"SBGF3\",\"subtitle\": \"Polymer Testing Lab\",\"floor\": \"Ground\",\"type\": \"\",\"latitude\": \"28.751279299678668\",\"longitude\": \"77.1179549396038\"&#125;]&#125; Step 3Create a layout xml file for your fragment.mymap.xml1234567891011121314151617181920212223242526272829&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:orientation=\"vertical\"&gt; &lt;fragment android:id=\"@+id/map\" android:name=\"com.google.android.gms.maps.SupportMapFragment\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" /&gt; &lt;AutoCompleteTextView android:layout_width=\"250dp\" android:layout_height=\"50dp\" android:padding=\"10dp\" android:hint=\"Search\" android:elevation=\"1dp\" android:layout_marginTop=\"5dp\" android:id=\"@+id/autoCompleteTextView\" android:layout_marginLeft=\"85dp\" android:layout_marginRight=\"85dp\" android:layout_above=\"@+id/button\" android:layout_centerHorizontal=\"true\" android:layout_gravity=\"center_horizontal|top\" /&gt;&lt;/FrameLayout&gt; Step 4Create a Java class for implementing custom cluster item.MyItem.java1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071import android.content.Context;import com.google.android.gms.maps.GoogleMap;import com.google.android.gms.maps.model.LatLng;import com.google.android.gms.maps.model.Marker;import com.google.android.gms.maps.model.MarkerOptions;import com.google.maps.android.clustering.ClusterItem;import com.google.maps.android.clustering.ClusterManager;import com.google.maps.android.clustering.view.DefaultClusterRenderer;public class MyItem implements ClusterItem &#123; private final LatLng mPosition; private String title; private String subtitle; private String floor; public MyItem(double lat, double lng,String stitle,String ssubtitle,String sfloor ) &#123; mPosition = new LatLng(lat, lng); title=stitle; subtitle=ssubtitle; floor=sfloor; &#125; public String getTitle() &#123; return title; &#125; public String getsubtitle() &#123; return subtitle; &#125; public String getfloor() &#123; return floor; &#125; @Override public LatLng getPosition() &#123; return mPosition; &#125;&#125;class MyClusterRenderer extends DefaultClusterRenderer&lt;MyItem&gt; &#123; public MyClusterRenderer(Context context, GoogleMap map, ClusterManager&lt;MyItem&gt; clusterManager) &#123; super(context, map, clusterManager); &#125; @Override protected void onBeforeClusterItemRendered(MyItem item, MarkerOptions markerOptions) &#123; super.onBeforeClusterItemRendered(item, markerOptions); markerOptions.title(item.getTitle()); markerOptions.snippet(item.getsubtitle()); &#125; @Override protected void onClusterItemRendered(final MyItem clusterItem, Marker marker) &#123; super.onClusterItemRendered(clusterItem, marker); &#125;&#125; Step 5Create the corresponding Java classes for the layout file created.getmarkerfromstring.java123456789101112131415161718192021222324252627public class getmarkerfromstring &#123; private double lat; private double lng; private String name; public double getLat() &#123; return lat; &#125; public double getLng() &#123; return lng; &#125; public void setLat(double lat) &#123; this.lat = lat; &#125; public void setLng(double lng) &#123; this.lng = lng; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125;&#125; MyMap.javaimport android.location.Location;import android.os.Bundle;import android.support.v4.app.Fragment;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.AutoCompleteTextView;import android.widget.Toast;import com.google.android.gms.common.api.GoogleApiClient;import com.google.android.gms.location.LocationServices;import com.google.android.gms.maps.CameraUpdateFactory;import com.google.android.gms.maps.GoogleMap;import com.google.android.gms.maps.SupportMapFragment;import com.google.android.gms.maps.model.CameraPosition;import com.google.android.gms.maps.model.LatLng;import com.google.maps.android.clustering.Cluster;import com.google.maps.android.clustering.ClusterManager;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.Arrays;import java.util.List;public class MyMap extends Fragment &#123; InputStream inputstream; BufferedReader reader; String title; private Location mCurrentLocation; AutoCompleteTextView actv; List&lt;MyItem&gt; items = new ArrayList&lt;MyItem&gt;(); String subtitle; String floor; String type; Double lat; Double lng; ArrayList&lt;getmarkerfromstring&gt; users=new ArrayList&lt;getmarkerfromstring&gt;(); String[] countries=new String[576]; int len; int arraylength; ClusterManager&lt;MyItem&gt; mClusterManager; JSONArray jsonArray; JSONObject jsonObject; String m; private GoogleMap mMap; private GoogleApiClient mGoogleApiClient; @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123; mGoogleApiClient = new GoogleApiClient.Builder(getActivity()) .addApi(LocationServices.API) .build(); View v=inflater.inflate(R.layout.mymap, container, false); actv=(AutoCompleteTextView)v.findViewById(R.id.autoCompleteTextView); return v; &#125; @Override public void onActivityCreated(Bundle savedInstanceState) &#123; super.onActivityCreated(savedInstanceState); setUpMapIfNeeded(); &#125; @Override public void onResume() &#123; super.onResume(); setUpMapIfNeeded(); &#125; private void setUpMapIfNeeded() &#123; if (mMap == null) &#123; mMap = ((SupportMapFragment) getChildFragmentManager().findFragmentById(R.id.map)).getMap();// Check if we were successful in obtaining the map. if (mMap != null) &#123; setUpMap(); &#125; &#125; &#125; private void initCamera() &#123; CameraPosition position = CameraPosition.builder() .target(new LatLng(YOUR_INITIALIZING_LATITUDE, YOUR_INITIALIZING_LONGITUDE)) .zoom(18f) .bearing(0.0f) .tilt(40f) .build();// Tilt is useful to give a 3D view of the map. mMap.animateCamera(CameraUpdateFactory.newCameraPosition(position), null);// Set Map type normal for easy loading of map. mMap.setMapType(GoogleMap.MAP_TYPE_NORMAL); mMap.setTrafficEnabled(true); mMap.setMyLocationEnabled(true); mMap.getUiSettings().setZoomControlsEnabled(true);&#125; private void setUpMap() &#123; mCurrentLocation = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient); initCamera(); mClusterManager = new ClusterManager&lt;MyItem&gt;(getActivity(), mMap); mMap.setOnCameraChangeListener(mClusterManager); mMap.setOnMarkerClickListener(mClusterManager); mClusterManager .setOnClusterClickListener(new ClusterManager.OnClusterClickListener&lt;MyItem&gt;() &#123; @Override public boolean onClusterClick(final Cluster&lt;MyItem&gt; cluster) &#123; mMap.animateCamera(CameraUpdateFactory.newLatLngZoom( cluster.getPosition(), (float) Math.floor(mMap .getCameraPosition().zoom + 2)), 300, null); return true; &#125; &#125;);// I have used a local JSON file to fetch the marker information. You could also parse the// JSON file from the internet. I would suggest saving it locally, but if you really want to fetch it// from the internet, use Retrofit Http client developed by Square. try &#123; inputstream = getResources().getAssets().open(\"map.json\"); reader = new BufferedReader(new InputStreamReader(inputstream)); m = reader.toString(); StringBuilder total = new StringBuilder(); String line; while ((line = reader.readLine()) != null) &#123; total.append(line); &#125; m = total.toString(); &#125; catch (IOException ex) &#123; Toast.makeText(getActivity(), \"fail\", Toast.LENGTH_SHORT).show(); &#125; try &#123;// JSON is parsed here. jsonObject = new JSONObject(m); jsonArray = jsonObject.optJSONArray(\"map\"); arraylength = jsonArray.length(); len = arraylength; for (int i = 0; i &lt; arraylength; i++) &#123; JSONObject jsonChildNode = jsonArray.getJSONObject(i); title = jsonChildNode.optString(\"title\"); subtitle = jsonChildNode.optString(\"subtitle\"); floor = jsonChildNode.optString(\"floor\"); type = jsonChildNode.optString(\"type\"); lat = jsonChildNode.optDouble(\"latitude\"); lng = jsonChildNode.optDouble(\"longitude\"); double lat1=lat; double lng1=lng; items.add(new MyItem(lat1,lng1,title,subtitle,floor));// I have implemented an autocompletetextview searching for the location on the map.// The search parameters include title and subtitle both. countries[2*i]=title; countries[2*i+1]=subtitle; getmarkerfromstring user = new getmarkerfromstring(); user.setLat(lat1); user.setLng(lng1); user.setName(countries[i]); users.add(user); getmarkerfromstring user2 = new getmarkerfromstring(); user2.setLat(lat1); user2.setLng(lng1); user2.setName(countries[2*i+1]); users.add(user2); &#125; mClusterManager.addItems(items); mClusterManager.setRenderer(new MyClusterRenderer(getActivity(), mMap, mClusterManager)); mClusterManager.setOnClusterItemClickListener(new ClusterManager.OnClusterItemClickListener&lt;MyItem&gt;() &#123; @Override public boolean onClusterItemClick(MyItem myItem) &#123; Toast.makeText(getActivity(), myItem.getfloor() + \" floor\",Toast.LENGTH_SHORT).show(); return false; &#125; &#125;); &#125; catch (JSONException e) &#123; e.printStackTrace(); &#125;// The adapter to populate the autocompletetextview. ArrayAdapter&lt;String&gt; adapter= new ArrayAdapter&lt;String&gt;(getActivity(), android.R.layout.simple_spinner_dropdown_item,countries); actv.setAdapter(adapter); actv.setOnItemClickListener(new AdapterView.OnItemClickListener() &#123; @Override public void onItemClick (AdapterView&lt;?&gt; parent, View view, int position, long id) &#123; //... your stuff String s=parent.getItemAtPosition(position).toString(); int pos= Arrays.asList(countries).indexOf(s); LatLng lng=new LatLng(users.get(pos).getLat(),users.get(pos).getLng()); mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(lng,(float)Math.floor(mMap.getCameraPosition().zoom+8))); &#125; &#125;); &#125;&#125; Step 6ABRA-KADABRA!!!NOTE: Take care of YOUR_LATITUDE_HERE,YOUR_LONGITUDE_HERE!!!","raw":null,"content":null,"categories":[],"tags":[{"name":"Google Maps","slug":"Google-Maps","permalink":"https://rohanagarwal94.com/tags/Google-Maps/"},{"name":"Google Utils Library","slug":"Google-Utils-Library","permalink":"https://rohanagarwal94.com/tags/Google-Utils-Library/"},{"name":"JSON","slug":"JSON","permalink":"https://rohanagarwal94.com/tags/JSON/"},{"name":"android","slug":"android","permalink":"https://rohanagarwal94.com/tags/android/"}]},{"title":"How to get feeds from public Facebook page without using Facebook Login in a Fragment","slug":"Get-feeds-from-public-Facebook-page-without-using-Facebook-Graph-API","date":"2016-06-18T11:16:36.000Z","updated":"2016-08-08T17:51:09.490Z","comments":true,"path":"18/06/2016/Get-feeds-from-public-Facebook-page-without-using-Facebook-Graph-API/","link":"","permalink":"https://rohanagarwal94.com/18/06/2016/Get-feeds-from-public-Facebook-page-without-using-Facebook-Graph-API/","excerpt":"This post basically helps the hacker get message and photos of the posts of a public Facebook page in a fragment.Will soon update the code to allow reading older posts,seeing comments and likes on individual posts.Hope Facebook doesn’t ban it!","keywords":null,"text":"This post basically helps the hacker get message and photos of the posts of a public Facebook page in a fragment.Will soon update the code to allow reading older posts,seeing comments and likes on individual posts.Hope Facebook doesn’t ban it! Well,this is my first hack in my android development career.So I hope the viewers forgive me for any amateurish approach towards the problem.It all started when I was developing my college app and I wanted to include feeds from my college’s confession page.But due to recent Facebook updates,it only allowed feeds to be extracted after loging into Facebook.I found it a tedious job.After some exhaustive hacking on my laptop and a couple of redbulls,I finally figured out a way to extract the feeds in the JSON format.I have used android volley network library to make http calls and download the images. As volley comes with powerful image caching mechanism, we dont have to much worry about caching the requests and images. I would like to credit Ravi Tamada (Android Hive) for his excellent tutorials.For the Github repo click here.The following steps explain them- Step 1Create a Facebook developer account and create a new App Id. Step 2Get the App Id and the App secret Step 3Get an access token by making a GET request to this url: https://graph.facebook.com/oauth/access_token?client_id=\"APP_ID\"&client_secret=\"APP_SECRET\"&grant_type=client_credential #NOTE: Remove the quotes too! Step 4Go to your fan page on facebook and look at the url. Once you have that, make a GET request to this url: https://graph.facebook.com/{fan-page-name}?access_token={access-token} #NOTE: Remove the curly brackets too! Step 5After obtaining the page Id, make a GET request to this url for the JSON: https://graph.facebook.com/{page id}/feed?fields=id,full_picture,message,story,created_time,link&access_token={access token} Step 6Add the following library in your dependencies in your build.gradle1compile 'com.mcxiaoke.volley:library-aar:1.0.0' Step 7Open res -&gt; values -&gt; dimens.xml and add following dimensions. If you dont have dimens.xml, create a new file and add these values.dimens.xml123456789101112131415161718192021&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;resources&gt; &lt;!-- Default screen margins, per the Android Design guidelines. --&gt; &lt;dimen name=\"activity_horizontal_margin\"&gt;16dp&lt;/dimen&gt; &lt;dimen name=\"activity_vertical_margin\"&gt;16dp&lt;/dimen&gt; &lt;dimen name=\"feed_item_margin\"&gt;10dp&lt;/dimen&gt; &lt;dimen name=\"feed_item_padding_top_bottom\"&gt;20dp&lt;/dimen&gt; &lt;dimen name=\"feed_item_padding_left_right\"&gt;15dp&lt;/dimen&gt; &lt;dimen name=\"feed_item_profile_pic\"&gt;50dp&lt;/dimen&gt; &lt;dimen name=\"feed_item_profile_info_padd\"&gt;10dp&lt;/dimen&gt; &lt;dimen name=\"feed_item_profile_name\"&gt;15dp&lt;/dimen&gt; &lt;dimen name=\"feed_item_timestamp\"&gt;13dp&lt;/dimen&gt; &lt;dimen name=\"feed_item_status_pad_left_right\"&gt;15dp&lt;/dimen&gt; &lt;dimen name=\"feed_item_status_pad_top\"&gt;13dp&lt;/dimen&gt; &lt;dimen name=\"feed_item_corner_radius\"&gt;3dp&lt;/dimen&gt; &lt;dimen name=\"feed_item_border_width\"&gt;1dp&lt;/dimen&gt; &lt;/resources&gt; Step 8Also create another xml file named colors.xml under res -&gt; values and add following colors.colors.xml123456789&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;resources&gt; &lt;color name=\"white\"&gt;#ffffff&lt;/color&gt; &lt;color name=\"feed_bg\"&gt;#d3d6db&lt;/color&gt; &lt;color name=\"feed_item_bg\"&gt;#ffffff&lt;/color&gt; &lt;color name=\"feed_item_border\"&gt;#c2c3c8&lt;/color&gt; &lt;color name=\"link\"&gt;#0a80d1&lt;/color&gt; &lt;color name=\"timestamp\"&gt;#a0a3a7&lt;/color&gt; &lt;/resources&gt; Step 9Under res -&gt; drawable, create a new file called bg_parent_rounded_corner.xml and paste the below code. This xml will give a rounded corner background to feed item.bg_parent_rounded_corner.xml12345678910111213141516171819&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;shape xmlns:android=\"http://schemas.android.com/apk/res/android\" android:shape=\"rectangle\" &gt; &lt;!-- view background color --&gt; &lt;solid android:color=\"@color/feed_item_bg\" &gt; &lt;/solid&gt; &lt;!-- view border color and width --&gt; &lt;stroke android:width=\"@dimen/feed_item_border_width\" android:color=\"@color/feed_item_border\" &gt; &lt;/stroke&gt; &lt;!-- Here is the corner radius --&gt; &lt;corners android:radius=\"@dimen/feed_item_corner_radius\" &gt; &lt;/corners&gt; &lt;/shape&gt; Step 10Now open your AndroidManifest.xml file and add Application.java class in tag. Also we need to add INTERNET permission as this app makes network calls.AndroidManifest.xml123&lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;&lt;application android:name=\".AppController\"&gt; ....&lt;/application&gt; Step 11Open your layout for your fragment (yourfragmentclass.xml) and add a list view element for the feed list.yourfragmentclass.xml12345678910111213&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"fill_parent\" android:layout_height=\"fill_parent\" android:orientation=\"vertical\" &gt; &lt;ListView android:id=\"@+id/list\" android:layout_width=\"fill_parent\" android:layout_height=\"wrap_content\" android:divider=\"@null\" /&gt; &lt;/LinearLayout&gt; Step 12Create another layout file named feed_item.xml under res -&gt; layout folder. This layout file represents each individual feed item row in the list view.feed_item.xml123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:background=\"@color/feed_bg\" android:orientation=\"vertical\" &gt; &lt;LinearLayout android:layout_width=\"fill_parent\" android:layout_height=\"fill_parent\" android:layout_marginLeft=\"@dimen/feed_item_margin\" android:layout_marginRight=\"@dimen/feed_item_margin\" android:layout_marginTop=\"@dimen/feed_item_margin\" android:background=\"@drawable/bg_parent_rounded_corner\" android:orientation=\"vertical\" android:paddingBottom=\"@dimen/feed_item_padding_top_bottom\" android:paddingTop=\"@dimen/feed_item_padding_top_bottom\" &gt; &lt;LinearLayout android:layout_width=\"fill_parent\" android:layout_height=\"wrap_content\" android:orientation=\"horizontal\" android:paddingLeft=\"@dimen/feed_item_padding_left_right\" android:paddingRight=\"@dimen/feed_item_padding_left_right\" &gt; &lt;com.android.volley.toolbox.NetworkImageView android:id=\"@+id/profilePic\" android:layout_width=\"@dimen/feed_item_profile_pic\" android:layout_height=\"@dimen/feed_item_profile_pic\" android:scaleType=\"fitCenter\" &gt; &lt;/com.android.volley.toolbox.NetworkImageView&gt; &lt;LinearLayout android:layout_width=\"fill_parent\" android:layout_height=\"wrap_content\" android:orientation=\"vertical\" android:paddingLeft=\"@dimen/feed_item_profile_info_padd\" &gt; &lt;TextView android:id=\"@+id/name\" android:layout_width=\"fill_parent\" android:layout_height=\"wrap_content\" android:textSize=\"@dimen/feed_item_profile_name\" android:textStyle=\"bold\" /&gt; &lt;TextView android:id=\"@+id/timestamp\" android:layout_width=\"fill_parent\" android:layout_height=\"wrap_content\" android:textColor=\"@color/timestamp\" android:textSize=\"@dimen/feed_item_timestamp\" /&gt; &lt;/LinearLayout&gt; &lt;/LinearLayout&gt; &lt;TextView android:id=\"@+id/txtStatusMsg\" android:layout_width=\"fill_parent\" android:layout_height=\"wrap_content\" android:paddingBottom=\"5dp\" android:paddingLeft=\"@dimen/feed_item_status_pad_left_right\" android:paddingRight=\"@dimen/feed_item_status_pad_left_right\" android:paddingTop=\"@dimen/feed_item_status_pad_top\" /&gt; &lt;TextView android:id=\"@+id/txtUrl\" android:layout_width=\"fill_parent\" android:layout_height=\"wrap_content\" android:linksClickable=\"true\" android:paddingBottom=\"10dp\" android:paddingLeft=\"@dimen/feed_item_status_pad_left_right\" android:paddingRight=\"@dimen/feed_item_status_pad_left_right\" android:textColorLink=\"@color/link\" /&gt; &lt;YOURPACKAGENAMEHERE.FeedImageView android:id=\"@+id/feedImage1\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:background=\"@color/white\" android:scaleType=\"fitXY\" android:visibility=\"visible\" /&gt; &lt;/LinearLayout&gt; &lt;/LinearLayout&gt; Step 13Since we have the JSON, we just need to parse it through volley. Create the following classes in your Android Studio.AppController.java1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768import android.app.Application;import android.text.TextUtils;import com.android.volley.Request;import com.android.volley.RequestQueue;import com.android.volley.toolbox.ImageLoader;import com.android.volley.toolbox.Volley;public class AppController extends Application &#123; public static final String TAG = AppController.class.getSimpleName(); private RequestQueue mRequestQueue; private ImageLoader mImageLoader; LruBitmapCache mLruBitmapCache; private static AppController mInstance; @Override public void onCreate() &#123; super.onCreate(); mInstance = this; &#125; public static synchronized AppController getInstance() &#123; return mInstance; &#125; public RequestQueue getRequestQueue() &#123; if (mRequestQueue == null) &#123; mRequestQueue = Volley.newRequestQueue(getApplicationContext()); &#125; return mRequestQueue; &#125; public ImageLoader getImageLoader() &#123; getRequestQueue(); if (mImageLoader == null) &#123; getLruBitmapCache(); mImageLoader = new ImageLoader(this.mRequestQueue, mLruBitmapCache); &#125; return this.mImageLoader; &#125; public LruBitmapCache getLruBitmapCache() &#123; if (mLruBitmapCache == null) mLruBitmapCache = new LruBitmapCache(); return this.mLruBitmapCache; &#125; public &lt;T&gt; void addToRequestQueue(Request&lt;T&gt; req, String tag) &#123; req.setTag(TextUtils.isEmpty(tag) ? TAG : tag); getRequestQueue().add(req); &#125; public &lt;T&gt; void addToRequestQueue(Request&lt;T&gt; req) &#123; req.setTag(TAG); getRequestQueue().add(req); &#125; public void cancelPendingRequests(Object tag) &#123; if (mRequestQueue != null) &#123; mRequestQueue.cancelAll(tag); &#125; &#125;&#125; LruBitmapCache.java1234567891011121314151617181920212223242526272829303132333435363738import android.app.Application;import android.graphics.Bitmap;import android.support.v4.util.LruCache;import com.android.volley.toolbox.ImageLoader.ImageCache;public class LruBitmapCache extends LruCache&lt;String, Bitmap&gt; implements ImageCache &#123; public static int getDefaultLruCacheSize() &#123; final int maxMemory = (int) (Runtime.getRuntime().maxMemory() / 1024); final int cacheSize = maxMemory / 8; return cacheSize; &#125; public LruBitmapCache() &#123; this(getDefaultLruCacheSize()); &#125; public LruBitmapCache(int sizeInKiloBytes) &#123; super(sizeInKiloBytes); &#125; @Override protected int sizeOf(String key, Bitmap value) &#123; return value.getRowBytes() * value.getHeight() / 1024; &#125; @Override public Bitmap getBitmap(String url) &#123; return get(url); &#125; @Override public void putBitmap(String url, Bitmap bitmap) &#123; put(url, bitmap); &#125;&#125; FeedItem.java1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556public class FeedItem &#123; private String id,status, image, timeStamp, url; public FeedItem() &#123; &#125; public FeedItem(String id, String image, String status, String timeStamp, String url) &#123; super(); this.id = id; this.image = image; this.status = status; this.timeStamp = timeStamp; this.url = url; &#125; public String getId() &#123; return id; &#125; public void setId(String id) &#123; this.id = id; &#125; public String getImge() &#123; return image; &#125; public void setImge(String image) &#123; this.image = image; &#125; public String getStatus() &#123; return status; &#125; public void setStatus(String status) &#123; this.status = status; &#125; public String getTimeStamp() &#123; return timeStamp; &#125; public void setTimeStamp(String timeStamp) &#123; this.timeStamp = timeStamp; &#125; public String getUrl() &#123; return url; &#125; public void setUrl(String url) &#123; this.url = url; &#125;&#125; FeedListAdapter.java123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133import android.app.Activity;import android.content.Context;import android.text.Html;import android.text.TextUtils;import android.text.format.DateUtils;import android.text.method.LinkMovementMethod;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.BaseAdapter;import android.widget.TextView;import com.android.volley.toolbox.ImageLoader;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Date;import java.util.List;public class FeedListAdapter extends BaseAdapter &#123; private Activity activity; private LayoutInflater inflater; private List&lt;FeedItem&gt; feedItems; ImageLoader imageLoader = AppController.getInstance().getImageLoader(); public FeedListAdapter(Activity activity, List&lt;FeedItem&gt; feedItems) &#123; this.activity = activity; this.feedItems = feedItems; &#125; @Override public int getCount() &#123; return feedItems.size(); &#125; @Override public Object getItem(int location) &#123; return feedItems.get(location); &#125; @Override public long getItemId(int position) &#123; return position; &#125; @Override public View getView(int position, View convertView, ViewGroup parent) &#123; if (inflater == null) inflater = (LayoutInflater) activity .getSystemService(Context.LAYOUT_INFLATER_SERVICE); if (convertView == null) convertView = inflater.inflate(R.layout.feed_item, null); if (imageLoader == null) imageLoader = AppController.getInstance().getImageLoader(); TextView timestamp = (TextView) convertView .findViewById(R.id.timestamp); TextView statusMsg = (TextView) convertView .findViewById(R.id.txtStatusMsg); TextView url = (TextView) convertView.findViewById(R.id.txtUrl); FeedImageView feedImageView = (FeedImageView) convertView .findViewById(R.id.feedImage1); FeedItem item = feedItems.get(position); // Converting timestamp into x ago format String a=item.getTimeStamp(); a=a.replace(\"T\",\" \").replace(\"+\",\".\"); SimpleDateFormat dateFormat=new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\"); try &#123; Date timeCreatedDate = dateFormat.parse(a); String timeAgo =(String) DateUtils.getRelativeTimeSpanString( (timeCreatedDate.getTime()), System.currentTimeMillis(), DateUtils.SECOND_IN_MILLIS); timestamp.setText(timeAgo); &#125; catch (ParseException e) &#123; e.printStackTrace(); &#125; // Chcek for empty status message if (!TextUtils.isEmpty(item.getStatus())) &#123; statusMsg.setText(item.getStatus()); statusMsg.setVisibility(View.VISIBLE); &#125; else &#123; // status is empty, remove from view statusMsg.setVisibility(View.GONE); &#125; // Checking for null feed url if (item.getUrl() != null) &#123; url.setText(Html.fromHtml(\"&lt;a href=\\\"\" + item.getUrl() + \"\\\"&gt;\" + item.getUrl() + \"&lt;/a&gt; \")); // Making url clickable url.setMovementMethod(LinkMovementMethod.getInstance()); url.setVisibility(View.VISIBLE); &#125; else &#123; // url is null, remove from the view url.setVisibility(View.GONE); &#125; // Feed image if (item.getImge() != null) &#123; feedImageView.setImageUrl(item.getImge(), imageLoader); feedImageView.setVisibility(View.VISIBLE); feedImageView .setResponseObserver(new FeedImageView.ResponseObserver() &#123; @Override public void onError() &#123; &#125; @Override public void onSuccess() &#123; &#125; &#125;); &#125; else &#123; feedImageView.setVisibility(View.GONE); &#125; return convertView; &#125;&#125; FeedImageView.javaimport android.content.Context;import android.text.TextUtils;import android.util.AttributeSet;import android.widget.ImageView;import android.widget.LinearLayout.LayoutParams;import com.android.volley.VolleyError;import com.android.volley.toolbox.ImageLoader;import com.android.volley.toolbox.ImageLoader.ImageContainer;import com.android.volley.toolbox.ImageLoader.ImageListener;public class FeedImageView extends ImageView &#123; public interface ResponseObserver &#123; public void onError(); public void onSuccess(); &#125; private ResponseObserver mObserver; public void setResponseObserver(ResponseObserver observer) &#123; mObserver = observer; &#125; /** * The URL of the network image to load */ private String mUrl; /** * Resource ID of the image to be used as a placeholder until the network * image is loaded. */ private int mDefaultImageId; /** * Resource ID of the image to be used if the network response fails. */ private int mErrorImageId; /** * Local copy of the ImageLoader. */ private ImageLoader mImageLoader; /** * Current ImageContainer. (either in-flight or finished) */ private ImageContainer mImageContainer; public FeedImageView(Context context) &#123; this(context, null); &#125; public FeedImageView(Context context, AttributeSet attrs) &#123; this(context, attrs, 0); &#125; public FeedImageView(Context context, AttributeSet attrs, int defStyle) &#123; super(context, attrs, defStyle); &#125; /** * Sets URL of the image that should be loaded into this view. Note that * calling this will immediately either set the cached image (if available) * or the default image specified by * * @param url * The URL that should be loaded into this ImageView. * @param imageLoader * ImageLoader that will be used to make the request. */ public void setImageUrl(String url, ImageLoader imageLoader) &#123; mUrl = url; mImageLoader = imageLoader; // The URL has potentially changed. See if we need to load it. loadImageIfNecessary(false); &#125; /** * Sets the default image resource ID to be used for this view until the * attempt to load it completes. */ public void setDefaultImageResId(int defaultImage) &#123; mDefaultImageId = defaultImage; &#125; /** * Sets the error image resource ID to be used for this view in the event * that the image requested fails to load. */ public void setErrorImageResId(int errorImage) &#123; mErrorImageId = errorImage; &#125; /** * Loads the image for the view if it isn't already loaded. * * @param isInLayoutPass * True if this was invoked from a layout pass, false otherwise. */ private void loadImageIfNecessary(final boolean isInLayoutPass) &#123; final int width = getWidth(); int height = getHeight(); boolean isFullyWrapContent = getLayoutParams() != null &amp;&amp; getLayoutParams().height == LayoutParams.WRAP_CONTENT &amp;&amp; getLayoutParams().width == LayoutParams.WRAP_CONTENT; // if the view's bounds aren't known yet, and this is not a // wrap-content/wrap-content // view, hold off on loading the image. if (width == 0 &amp;&amp; height == 0 &amp;&amp; !isFullyWrapContent) &#123; return; &#125; // if the URL to be loaded in this view is empty, cancel any old // requests and clear the // currently loaded image. if (TextUtils.isEmpty(mUrl)) &#123; if (mImageContainer != null) &#123; mImageContainer.cancelRequest(); mImageContainer = null; &#125; setDefaultImageOrNull(); return; &#125; // if there was an old request in this view, check if it needs to be // canceled. if (mImageContainer != null &amp;&amp; mImageContainer.getRequestUrl() != null) &#123; if (mImageContainer.getRequestUrl().equals(mUrl)) &#123; // if the request is from the same URL, return. return; &#125; else &#123; // if there is a pre-existing request, cancel it if it's // fetching a different URL. mImageContainer.cancelRequest(); setDefaultImageOrNull(); &#125; &#125; // The pre-existing content of this view didn't match the current URL. // Load the new image // from the network. ImageContainer newContainer = mImageLoader.get(mUrl, new ImageListener() &#123; @Override public void onErrorResponse(VolleyError error) &#123; if (mErrorImageId != 0) &#123; setImageResource(mErrorImageId); &#125; if (mObserver != null) &#123; mObserver.onError(); &#125; &#125; @Override public void onResponse(final ImageContainer response, boolean isImmediate) &#123; // If this was an immediate response that was delivered // inside of a layout // pass do not set the image immediately as it will // trigger a requestLayout // inside of a layout. Instead, defer setting the image // by posting back to // the main thread. if (isImmediate &amp;&amp; isInLayoutPass) &#123; post(new Runnable() &#123; @Override public void run() &#123; onResponse(response, false); &#125; &#125;); return; &#125; int bWidth = 0, bHeight = 0; if (response.getBitmap() != null) &#123; setImageBitmap(response.getBitmap()); bWidth = response.getBitmap().getWidth(); bHeight = response.getBitmap().getHeight(); adjustImageAspect(bWidth, bHeight); &#125; else if (mDefaultImageId != 0) &#123; setImageResource(mDefaultImageId); &#125; if (mObserver != null) &#123; mObserver.onSuccess(); &#125; &#125; &#125;); // update the ImageContainer to be the new bitmap container. mImageContainer = newContainer; &#125; private void setDefaultImageOrNull() &#123; if (mDefaultImageId != 0) &#123; setImageResource(mDefaultImageId); &#125; else &#123; setImageBitmap(null); &#125; &#125; @Override protected void onLayout(boolean changed, int left, int top, int right, int bottom) &#123; super.onLayout(changed, left, top, right, bottom); loadImageIfNecessary(true); &#125; @Override protected void onDetachedFromWindow() &#123; if (mImageContainer != null) &#123; // If the view was bound to an image request, cancel it and clear // out the image from the view. mImageContainer.cancelRequest(); setImageBitmap(null); // also clear out the container so we can reload the image if // necessary. mImageContainer = null; &#125; super.onDetachedFromWindow(); &#125; @Override protected void drawableStateChanged() &#123; super.drawableStateChanged(); invalidate(); &#125; /* * Adjusting imageview height * */ private void adjustImageAspect(int bWidth, int bHeight) &#123; LayoutParams params = (LayoutParams) getLayoutParams(); if (bWidth == 0 || bHeight == 0) return; int swidth = getWidth(); int new_height = 0; new_height = swidth * bHeight / bWidth; params.width = swidth; params.height = new_height; setLayoutParams(params); &#125;&#125; YourFagmentClass.java123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169import android.support.annotation.Nullable;import android.support.v4.app.Fragment;import android.support.v4.widget.SwipeRefreshLayout;import android.os.Bundle;import java.io.UnsupportedEncodingException;import java.util.ArrayList;import java.util.List;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import android.annotation.SuppressLint;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ListView;import android.widget.Toast;import com.android.volley.Cache;import com.android.volley.Cache.Entry;import com.android.volley.Request.Method;import com.android.volley.Response;import com.android.volley.VolleyError;import com.android.volley.toolbox.JsonObjectRequest;public class YourFragmentClass extends Fragment &#123; private ListView listView; private FeedListAdapter listAdapter; private List&lt;FeedItem&gt; feedItems; SwipeRefreshLayout mSwipeRefreshLayout; private String URL_FEED = \"ENTER YOUR JSON URL HERE\"; @SuppressLint(\"NewApi\") @Override public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) &#123; View v =inflater.inflate(R.layout.yourfragmentclass,container,false); listView = (ListView)v.findViewById(R.id.list); feedItems = new ArrayList&lt;FeedItem&gt;(); listAdapter = new FeedListAdapter(getActivity(), feedItems); listView.setAdapter(listAdapter); // We first check for cached request Cache cache = AppController.getInstance().getRequestQueue().getCache(); Entry entry = cache.get(URL_FEED); if (entry != null) &#123; // fetch the data from cache try &#123; String data = new String(entry.data, \"UTF-8\"); try &#123; parseJsonFeed(new JSONObject(data)); &#125; catch (JSONException e) &#123; e.printStackTrace(); &#125; &#125; catch (UnsupportedEncodingException e) &#123; e.printStackTrace(); &#125; &#125; else &#123; // making fresh volley request and getting json JsonObjectRequest jsonReq = new JsonObjectRequest(Method.GET, URL_FEED, null, new Response.Listener&lt;JSONObject&gt;() &#123; @Override public void onResponse(JSONObject response) &#123; if (response != null) &#123; parseJsonFeed(response); &#125; &#125; &#125;, new Response.ErrorListener() &#123; @Override public void onErrorResponse(VolleyError error) &#123; Toast.makeText(getActivity(),\"NO INTERNET\",Toast.LENGTH_LONG).show(); &#125; &#125;); // Adding request to volley request queue AppController.getInstance().addToRequestQueue(jsonReq); &#125; mSwipeRefreshLayout = (SwipeRefreshLayout)v.findViewById(R.id.swipeContainer); mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() &#123; @Override public void onRefresh() &#123; //Refreshing data on server feedItems.clear(); JsonObjectRequest jsonReq = new JsonObjectRequest(Method.GET, URL_FEED, null, new Response.Listener&lt;JSONObject&gt;() &#123; @Override public void onResponse(JSONObject response) &#123; if (response != null) &#123; parseJsonFeed(response); &#125; &#125; &#125;, new Response.ErrorListener() &#123; @Override public void onErrorResponse(VolleyError error) &#123; mSwipeRefreshLayout.setRefreshing(false); &#125; &#125;); // Adding request to volley request queue AppController.getInstance().addToRequestQueue(jsonReq); &#125; &#125;); return v; &#125; /** * Parsing json reponse and passing the data to feed view list adapter * */ private void parseJsonFeed(JSONObject response) &#123; mSwipeRefreshLayout.setRefreshing(true); try &#123; JSONArray feedArray = response.getJSONArray(\"data\"); for (int i = 0; i &lt; feedArray.length(); i++) &#123; JSONObject feedObj = (JSONObject) feedArray.get(i); FeedItem item = new FeedItem(); item.setId(feedObj.getString(\"id\")); // Image might be null sometimes String image = feedObj.isNull(\"full_picture\") ? null : feedObj .getString(\"full_picture\"); item.setImge(image); if(feedObj.opt(\"message\")!=null) item.setStatus(feedObj.getString(\"message\")); else item.setStatus(feedObj.getString(\"story\")); item.setTimeStamp(feedObj.getString(\"created_time\")); // url might be null sometimes String feedUrl = feedObj.isNull(\"link\") ? null : feedObj .getString(\"link\"); item.setUrl(feedUrl); feedItems.add(item); &#125; // notify data changes to list adapter listAdapter.notifyDataSetChanged(); mSwipeRefreshLayout.setRefreshing(false); &#125; catch (JSONException e) &#123; e.printStackTrace(); &#125; &#125;&#125; Step 14 ABRA-KADABRA!!!NOTE: Take care of ENTERYOURPACKAGEHERE!!!","raw":null,"content":null,"categories":[],"tags":[{"name":"JSON","slug":"JSON","permalink":"https://rohanagarwal94.com/tags/JSON/"},{"name":"android","slug":"android","permalink":"https://rohanagarwal94.com/tags/android/"}]}]}